import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.Assert;
import org.testng.annotations.Test;

public class GoogleTest {

    @Test
    public void TestS(){

    // 1

        WebDriver driver = new ChromeDriver();

    // Необходимо создать драйвер (фактически мы открываем браузер), в данном тесте драйвер фактически и есть браузер, если мы не создадим драйвер, то браузер 
    //не откроектся


    // 2

        driver.get("https://www.google.com");

    // Далее необходимо перейти на страницу Google
    // driver - это переменная, в которой хранится объект driver, и это синоним открытой текущей страницы
    // get - это переход, вызываем метод get() и в скобки помещаем ссылку


    // 3

        WebElement textBox = driver.findElement(By.name("q"));

    // В поисковую строку Google вбиваем слово Selenium. Для этого эту строку надо найти на этой странице и драйверу сказать что это именно это поле 
    //(нужен к-то идентификатор поля)

    // Создаётся переменная с типом WebElement и называем её, например, textBox, в эту переменную будет загружен текст, в качестве идентификатора/аргумента 
    // необходимо передать тип By - это специальны тип Selenium, который выполняет различные поиски. Необходимо передать селектор/локатор/ключ By.name("q") 
    // искать в DevTools с помощью инструмента селектора, который подсвечивает код нужного элемента, обязательно соблюдаль регистр и обязательно выбираем с 
    // маленькой буквы (с большой буквы пишутся классы)), который при выполнении на этой странице фронта, вернёт мне конкретно элемент UI

    // Метод findElement() - это запрос, который ищет один элемент, результат этого метода тип WebElement

    // (By.name("q")) - это локатор, благодаря которому будет найден элемент name = q, который передастся в
    // переменную textBox


    // 4

        textBox.sendKeys("selenium\n");

    // Метод sendKeys() - будет отправлять данные в элемент, который мы передадим в аргументе в "" (что мы пишем в поисковой строке, то и будет передаваться). 
    // Т.е. 3 и 4 строчки кода найдут на странице Google поисковую строку и напечатают внутри неё "selenium"


    // 5 (этот пункт может не сработать, пока закоменчено)
    // WebElement button = driver.findElement(By.name("btnK"));
    // Далее по сценарию теста нам необходимо найти и нажать на кнопку GoogleSearch → снова вызываем инструмент-селектор
    // в DevTools, снова наводим инструмент-селектор на UI и смотрим что отразилось в DevTools
    // Ищем кнопку на UI
    // Т.к. driver - это синоним открытой текущей страницы на UI, то обязательно его указываем

    // 5.1
    // Если кнопка не нашлась (такое может быть, можно выполнить поиск, нажав Enter), то в 4 шаге в "selenium" ставим \n ("selenium\n") - это переход строки, 
    // очень часто сайты нормально на это реагируют и обрабатывают

    // 6
    //button.click();
    // button нашли и теперь необходимо сделать click


    // 7
        WebElement text = driver.findElement(By.xpath("//h3[text() = 'Selenium']"));
    // После клика мы переходим на страницу с результатами поиска, где необходимо нажать на ссылку сайта Selenium
    // У ссылок нет name (по поиску в DevTools с помощью свитчера), поэтому здесь нужен xpath-запрос (это пока сложно, осознание придёт со временем, но 
    xpath очень мощный инструмент, с ним необходимо разобраться)

    // 8
    // Пишем Assert (это уже TestNG), т.о. сравниваем ожидание (написано там "Selenium" или не написано)
        Assert.assertEquals(text.getText(), "Selenium");

    // 9
    // Закрываем браузер

        driver.quit();

        }
    }
